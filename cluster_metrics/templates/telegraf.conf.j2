[global_tags]
{% if inventory_hostname in groups['all_containers'] %}
  node_type = "container"
{% elif inventory_hostname in groups['hosts'] %}
  node_type = "physical_host"
{% endif %}

{%   set run_commands = [] %}
{%   for key, value in command_plugins.items() %}
{%     if value.when_group | bool and (value.group == inventory_hostname or inventory_hostname in value.group | default([])) %}
{%       set _ = run_commands.extend(value.command) %}
{%     endif %}
{%   endfor %}

{# The run_int adds padding to the interval so that plugins being added to the system have #}
{#  enough time to execute. Every added plugin will add 8 seconds to the interval with a #}
{#  default of 24. This value is later used as the flush interval which needs to be 2x the agent. #}
{% set run_int = run_commands | length %}
{% set interval = (run_int < 1) | ternary(0, run_int * 8) | int + 24 %}

[agent]
  interval = "{{ interval }}s"
  round_interval = false
  metric_batch_size = 1024
  metric_buffer_limit = 10240
  collection_jitter = "8s"
  flush_interval = "{{ interval * 2 }}s"
  flush_jitter = "8s"
  debug = false
  quiet = true
{% if inventory_hostname in groups['all_containers'] %}
  hostname = "{{ ansible_hostname }}"
{% else %}
  hostname = "{{ inventory_hostname }}"
{% endif %}
  omit_hostname = false

[[outputs.influxdb]]
  urls = ["{{ influx_telegraf_targets | map('quote') | join(',') }}"]
  database = "{{ influxdb_db_name }}"
  precision = "s"
  write_consistency = "any"
  timeout = "5s"

{% if outputs_prometheus_client is defined %}
[[outputs.prometheus_client]]
  listen = "{{ outputs_prometheus_client_listen | default(':9126') }}"
  expiration_interval = "{{ outputs_prometheus_client_expiration_interval | default('60s') }}"
{% endif %}

[[inputs.processes]]

[[inputs.system]]

{%   set run_commands = [] %}
{%   for key, value in command_plugins.items() %}
{%     if value.when_group | bool and (value.group == inventory_hostname or inventory_hostname in value.group | default([])) %}
{%       set _ = run_commands.extend(value.command) %}
{%     endif %}
{%   endfor %}

{%   if run_commands %}
[[inputs.exec]]
  commands = [{{ run_commands | map('quote') | join(',') }}]
  timeout = "{{ (run_commands | length) * 8 }}s"
  data_format = "influx"
{%   endif %}

[[inputs.conntrack]]
  files = ["ip_conntrack_count","ip_conntrack_max",
            "nf_conntrack_count","nf_conntrack_max"]
  dirs = ["/proc/sys/net/ipv4/netfilter","/proc/sys/net/netfilter"]

{% if inventory_hostname in groups['swift-proxy_containers'] %}
[[inputs.statsd]]
  service_address = ":8125"
  metric_separator = "."
  templates = [
    "*.swift.proxy-server.*.*.*.* host.measurement.measurement.measurement.method.returncode.field*",
    "*.swift.proxy-server.*.policy.*.*.*.* host.measurement.measurement.measurement.measurement.measurement.method.returncode.field*",
  ]
{% endif %}

{% if inventory_hostname in groups['all_containers'] %}
[[inputs.net]]

{% elif inventory_hostname in groups['hosts'] %}
[[inputs.cpu]]
  percpu = true
  totalcpu = true
  fielddrop = ["time_*"]

[[inputs.net]]

[[inputs.netstat]]

[[inputs.disk]]
  ignore_fs = ["tmpfs", "devtmpfs"]

[[inputs.diskio]]

[[inputs.kernel]]

[[inputs.mem]]

[[inputs.swap]]

{% endif %}

{% if inventory_hostname in groups['haproxy'] and (haproxy_stats_enabled | bool)  %}
[[inputs.haproxy]]
  ## An array of address to gather stats about. Specify an ip on hostname
  ## with optional port. ie localhost, 10.10.3.33:1936, etc.
  ## Make sure you specify the complete path to the stats endpoint
  ## including the protocol, ie http://10.10.3.33:1936/haproxy?stats

  ## If no servers are specified, then default to 127.0.0.1:1936/haproxy?stats
  #servers = ["http://myhaproxy.com:1936/haproxy?stats"]
  servers = ["https://{{ haproxy_username }}:{{ haproxy_stats_password }}@{{ haproxy_stats_bind_address }}:{{ haproxy_stats_port }}/haproxy?stats"]

  ## You can also use local socket with standard wildcard globbing.
  ## Server address not starting with 'http' will be treated as a possible
  ## socket, so both examples below are valid.
  #servers = ["socket:/var/run/haproxy.stat"]

  ## By default, some of the fields are renamed from what haproxy calls them.
  ## Setting this option to true results in the plugin keeping the original
  ## field names.
  # keep_field_names = true

  ## Optional SSL Config
  # ssl_ca = "/etc/telegraf/ca.pem"
  # ssl_cert = "/etc/telegraf/cert.pem"
  # ssl_key = "/etc/telegraf/key.pem"
  ## Use SSL but skip chain & host verification
  insecure_skip_verify = true
{% endif %}
